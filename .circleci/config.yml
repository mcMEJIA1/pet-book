version: 2.1
orbs:
  node: circleci/node@4.1.0
  browser-tools: circleci/browser-tools@1.0.1
  sonarcloud: extendaretail/sonarcloud@0.0.2

jobs:
  unit_test:
    executor: node/default
    steps:
      - checkout
      - node/install-packages
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Unit test
          command: npm run test-ci
      - persist_to_workspace:
          root: ~/project
          paths: . 
  static_code_scan:
    executor: node/default
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Static code Analysis
          command: |
            npm i -D sonarqube-scanner
            ./node_modules/sonarqube-scanner/dist/bin/sonar-scanner -Dsonar.login=$SONAR_TOKEN
      - run:
          name: quality-gate
          command: |
            REPORT_PATH=".scannerwork/report-task.txt"
            CE_TASK_ID_KEY="ceTaskId="
            
            SONAR_INSTANCE="https://sonarcloud.io"
            SLEEP_TIME=5
            
            # get the compute engine task id
            ce_task_id=$(cat $REPORT_PATH | grep $CE_TASK_ID_KEY | cut -d'=' -f2)
            echo "Using task id of ${ce_task_id}"
            
            if [ -z "$ce_task_id" ]; then
              echo "No task id found"
              exit 1
            fi

            # grab the status of the task
            # if CANCELLED or FAILED, fail the Build
            # if SUCCESS, stop waiting and grab the analysisId
            wait_for_success=true

            while [ "${wait_for_success}" = "true" ]
            do
              ce_status=$(curl -s -u "${SONAR_TOKEN}": "${SONAR_INSTANCE}"/api/ce/task?id=${ce_task_id} | jq -r .task.status)

              echo "Status of SonarQube task is ${ce_status}"

              if [ "${ce_status}" = "CANCELLED" ]; then
                echo "SonarQube Compute job has been cancelled - exiting with error"
                exit 504
              fi

              if [ "${ce_status}" = "FAILED" ]; then
                echo "SonarQube Compute job has failed - exit with error"
                exit 500
              fi

              if [ "${ce_status}" = "SUCCESS" ]; then
                wait_for_success=false
              fi

              sleep "${SLEEP_TIME}"

            done

            ce_analysis_id=$(curl -s -u $SONAR_TOKEN: $SONAR_INSTANCE/api/ce/task?id=$ce_task_id | jq -r .task.analysisId)
            echo "Using analysis id of ${ce_analysis_id}"

            # get the status of the quality gate for this analysisId
            qg_status=$(curl -s -u $SONAR_TOKEN: $SONAR_INSTANCE/api/qualitygates/project_status?analysisId="${ce_analysis_id}" | jq -r .projectStatus.status)
            echo "Quality Gate status is ${qg_status}"

            if [ "${qg_status}" != "OK" ]; then
              echo "Quality gate is not OK - exiting with error"
              exit 1
            fi
                        
  build:
    executor: node/default
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Build app
          command: ng build --prod
      - persist_to_workspace:
          root: ~/project/dist
          paths: pet-book
  zip:
    machine: true
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Zipping artifact to deploy
          command: docker run -v /home/circleci/project/pet-book:/to_zip -w /to_zip kramos/alpine-zip -r pet-book.zip /to_zip
      - store_artifacts:
          path: /home/circleci/app/pet-book/pet-book.zip
      - persist_to_workspace:
          root: ~/project
          paths: .

workflows:
  default:
    jobs:
      - unit_test
      - static_code_scan:
          context: sonarCloud
          requires:
            - unit_test
      - build:
          requires:
            - static_code_scan
      - zip:
          requires:
            - build
